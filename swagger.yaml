openapi: 3.0.0
info:
  title: LessonLearn API
  description: API documentation for LessonLearn project
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Development Server
  - url: https://learn-server-sroc.onrender.com
    description: Production Server

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "607c72efc2d3f3a3e8bc6e1f"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          example: "johndoe@example.com"
        password:
          type: string
          example: "password123"
        profilePic:
          type: string
          example: "https://res.cloudinary.com/demo/image/upload/v1623255969/profile_pics/johndoe.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2022-05-06T15:44:42Z"
        updatedAt:
          type: string
          format: date-time
          example: "2022-05-06T15:44:42Z"

    Category:
      type: object
      required:
        - name
        - userId
      properties:
        id:
          type: string
          format: uuid
          example: "65d2e2bf9a8c4d7e6a8b4c21"
        name:
          type: string
          example: "Programming"
        userId:
          type: string
          format: uuid
          example: "65d2e29f8f47d3f5b98e4a30"

    Lesson:
      type: object
      required:
        - userId
        - title
        - content
        - categoryId
      properties:
        id:
          type: string
          format: uuid
          example: "65d2e3451a9b5c4e3f8c2a9d"
        userId:
          type: string
          format: uuid
          example: "65d2e29f8f47d3f5b98e4a30"
        title:
          type: string
          example: "Introduction to JavaScript"
        content:
          type: string
          example: "JavaScript is a programming language used for web development."
        categoryId:
          type: string
          format: uuid
          example: "65d2e2bf9a8c4d7e6a8b4c21"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Question:
      type: object
      required:
        - lessonId
        - questionText
        - choices
        - correctAnswer
      properties:
        id:
          type: string
          format: uuid
          example: "65d2e789f3b4d9e2c8a7b6d1"
        lessonId:
          type: string
          format: uuid
          example: "65d2e3451a9b5c4e3f8c2a9d"
        questionText:
          type: string
          example: "What is the correct syntax for declaring a variable in JavaScript?"
        choices:
          type: array
          items:
            type: string
          example: ["var x = 10;", "let x = 10;", "const x = 10;", "All of the above"]
        correctAnswer:
          type: string
          example: "All of the above"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "64a3b1c2e4d123456789abcd"
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "hashedpassword"

    Category:
      type: object
      properties:
        id:
          type: string
          example: "60b8d295f8b4a3b2c8c6e4e7"
        name:
          type: string
          example: "Mathematics"

    Lesson:
      type: object
      properties:
        id:
          type: string
          example: "64a3b1c2e4d123456789def"
        title:
          type: string
          example: "Introduction to Algebra"
        category:
          type: string
          example: "Mathematics"

    Question:
      type: object
      properties:
        id:
          type: string
          example: "6123abcd4567efgh8901ijkl"
        lessonId:
          type: string
          example: "64a3b1c2e4d123456789def"
        question:
          type: string
          example: "What is 2 + 2?"
        answer:
          type: string
          example: "4"

security:
  - BearerAuth: []

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                username:
                  type: string
                  example: "johndoe123"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "500":
          description: Server error

  /api/auth/login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "johndoe123"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1..."
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "64a3b1c2e4d123456789def"
                      firstName:
                        type: string
                        example: "John"
                      lastName:
                        type: string
                        example: "Doe"
                      username:
                        type: string
                        example: "johndoe123"
                      email:
                        type: string
                        example: "johndoe@example.com"
        "400":
          description: Invalid credentials
        "500":
          description: Server error

  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "607c72efc2d3f3a3e8bc6e1f"
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found

    put:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "607c72efc2d3f3a3e8bc6e1f"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John Updated"
                lastName:
                  type: string
                  example: "Doe Updated"
                username:
                  type: string
                  example: "johndoeupdated"
                email:
                  type: string
                  example: "updatedemail@example.com"
                password:
                  type: string
                  example: "newpassword123"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data
        "404":
          description: User not found

    delete:
      summary: Delete user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "607c72efc2d3f3a3e8bc6e1f"
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found

  /api/users/{userId}/profile-pic:
    post:
      summary: Upload profile picture for a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "607c72efc2d3f3a3e8bc6e1f"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile picture uploaded successfully"
        "400":
          description: Invalid file or user ID
        "404":
          description: User not found

  /api/categories:
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Science"
      responses:
        "201":
          description: Category created successfully
        "401":
          description: Unauthorized

    get:
      summary: Get all categories
      tags:
        - Categories
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of categories

  /api/categories/{id}:
    put:
      summary: Update a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Category"
      responses:
        "200":
          description: Category updated successfully

    delete:
      summary: Delete a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category deleted successfully

  /api/lessons:
    post:
      summary: Create a new lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  example: "Introduction to JavaScript"
                content:
                  type: string
                  example: "JavaScript is a programming language..."
                categoryName:
                  type: string
                  example: "Programming"
      responses:
        "201":
          description: Lesson created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "64a3b1c2e4d123456789def"
                  userId:
                    type: string
                    example: "user123"
                  title:
                    type: string
                    example: "Introduction to JavaScript"
                  content:
                    type: string
                    example: "JavaScript is a programming language..."
                  categoryId:
                    type: string
                    example: "65b3c4d5e6f7890abc123456"
        "400":
          description: Missing required fields
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    get:
      summary: Get all lessons for the logged-in user
      tags:
        - Lessons
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A list of lessons
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "64a3b1c2e4d123456789def"
                    userId:
                      type: string
                      example: "user123"
                    title:
                      type: string
                      example: "Introduction to JavaScript"
                    content:
                      type: string
                      example: "JavaScript is a programming language..."
                    categoryId:
                      type: string
                      example: "65b3c4d5e6f7890abc123456"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/lessons/{id}:
    get:
      summary: Get a lesson by ID
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lesson retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "64a3b1c2e4d123456789def"
                  userId:
                    type: string
                    example: "user123"
                  title:
                    type: string
                    example: "Introduction to JavaScript"
                  content:
                    type: string
                    example: "JavaScript is a programming language..."
                  categoryId:
                    type: string
                    example: "65b3c4d5e6f7890abc123456"
        "404":
          description: Lesson not found
        "500":
          description: Internal server error

    put:
      summary: Update a lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Advanced JavaScript"
                content:
                  type: string
                  example: "Let's explore advanced JavaScript concepts..."
      responses:
        "200":
          description: Lesson updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lesson updated successfully"
                  lesson:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "64a3b1c2e4d123456789def"
                      userId:
                        type: string
                        example: "user123"
                      title:
                        type: string
                        example: "Advanced JavaScript"
                      content:
                        type: string
                        example: "Let's explore advanced JavaScript concepts..."
                      categoryId:
                        type: string
                        example: "65b3c4d5e6f7890abc123456"
        "400":
          description: Missing required fields
        "404":
          description: Lesson not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lesson deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lesson deleted successfully"
        "404":
          description: Lesson not found
        "500":
          description: Internal server error
    get:
      summary: Get a lesson by ID
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lesson details

    put:
      summary: Update a lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Lesson Title"
      responses:
        "200":
          description: Lesson updated successfully

    delete:
      summary: Delete a lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lesson deleted successfully

  /api/questions/lessons/{lessonId}/generate:
    post:
      summary: Generate questions for a lesson
      tags:
        - Questions
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Questions generated successfully

  /api/questions/lessons/{lessonId}:
    get:
      summary: Get questions for a lesson
      tags:
        - Questions
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of questions